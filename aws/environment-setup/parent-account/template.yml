AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  ParentAccountId:
    Type: String
    MaxLength: 12
    MinLength: 12
  ChildAccounts:
    Type: CommaDelimitedList
  OrganisationId:
    Type: String
    AllowedPattern: ^o-[a-z0-9]{10,32}$
  NotificationEmailAddress:
    Type: String
    AllowedPattern: ^.+@.+$
  ExpectedIpRanges:
    Type: String
    AllowedPattern: ^(\d+\.\d+\.\d+.\d+/\d+)(,\d+\.\d+\.\d+.\d+/\d+)*$
  Budget:
    Type: Number
    MinValue: 0.01
    Description: Expected monthly budget for entire organisation in USD (can be a float)
  CodeVersion:
    Type: String
  Revision:
    Type: String

Resources: 

  AllAccountAdminUser:
    Type: AWS::IAM::User
    Properties:
      UserName: AllAccountAdminUser
      Groups:
        - !Ref AllAccountAdminGroup

  AllAccountAdminGroup: 
    Type: "AWS::IAM::Group"
    Properties: 
      ManagedPolicyArns: 
        - !Ref AllAccountAdminPolicy

  AllAccountAdminPolicy: 
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            # admin permissions on 'this' account (i.e. the parent account)
            Effect: "Allow"
            Action: 
              - "*"
            Resource: "*"
          - 
            # admin permissions on each child account
            Effect: "Allow"
            Action: 
              - "sts:AssumeRole"
            Resource: !Split [ ",", !Join [ "", ["arn:aws:iam::", !Join [ ":role/OrganizationAccountAccessRole,arn:aws:iam::", !Ref ChildAccounts ], ":role/OrganizationAccountAccessRole"]]]

  CloudTrailLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-cloudtrail-logs-${AWS::AccountId}"
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration: 
        Rules: 
          - Id: CleanUp
            AbortIncompleteMultipartUpload: 
              DaysAfterInitiation: 2
            Status: Enabled
            #also "Clean up expired object delete markers" not in cf yet - https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/132
      # this block needs to be commented out on the first stack deploy, because of circular dependency issues in cloudformation - aws blogs recommend various dodgy 'solutions'
      NotificationConfiguration: 
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt LoginMonitorFunction.Arn
  CloudTrailLogsBucketPolicy: 
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: 
        Ref: CloudTrailLogsBucket
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudtrail.amazonaws.com
          Action: s3:GetBucketAcl
          Resource: !GetAtt CloudTrailLogsBucket.Arn
        - Effect: Allow
          Principal:
            Service:
            - cloudtrail.amazonaws.com
          Action: s3:PutObject
          # we don't actually expect to write anything to this path, but cloud trail checks for it, so it has to be there
          Resource: !Sub "${CloudTrailLogsBucket.Arn}/AWSLogs/${ParentAccountId}/*"
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control
        - Effect: Allow
          Principal:
            Service:
            - cloudtrail.amazonaws.com
          Action: s3:PutObject
          Resource: !Sub "${CloudTrailLogsBucket.Arn}/AWSLogs/${OrganisationId}/*"
          Condition:
            StringEquals:
              s3:x-amz-acl: bucket-owner-full-control

  LoginMonitorLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-login-monitor"
      RetentionInDays: 120

  LoginMonitorLambdaExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref LoginMonitorLambdaExecutionPolicy

  LoginMonitorLambdaExecutionPolicy: 
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !GetAtt LoginMonitorLogGroup.Arn
          - 
            Effect: "Allow"
            Action: 
              - "s3:ListBucket"
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-cloudtrail-logs-${AWS::AccountId}"
          - 
            Effect: "Allow"
            Action: 
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-cloudtrail-logs-${AWS::AccountId}/*"
          - 
            Effect: "Allow"
            Action: 
              - "sns:Publish"
            Resource: !Ref NotificationsTopic

  LoginMonitorFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub "${AWS::StackName}-login-monitor"
      Handler: loginChecker.handler
      Role: !GetAtt LoginMonitorLambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Timeout: 20
      MemorySize: 128
      Environment:
        Variables:
          IP_RANGES: !Ref ExpectedIpRanges
          ALERTS_TOPIC: !Ref NotificationsTopic
      Code: 
        S3Bucket: !Sub "cloudformation-code-deploy-staging-${AWS::AccountId}"
        S3Key: !Sub "${AWS::StackName}/function-code/code.zip"
        S3ObjectVersion: !Ref CodeVersion
      Tags: 
        - Key: revision
          Value: !Ref Revision
  LoginMonitorLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt LoginMonitorFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}-cloudtrail-logs-${AWS::AccountId}"

  CfnStackDriftCheckerLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-cfn-stack-drift-checker"
      RetentionInDays: 120

  CfnStackDriftCheckerLambdaExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: 'automation-admin-checker'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - !Ref CfnStackDriftCheckerLambdaExecutionPolicy

  CfnStackDriftCheckerLambdaExecutionPolicy: 
    Type: "AWS::IAM::ManagedPolicy"
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !GetAtt CfnStackDriftCheckerLogGroup.Arn
          - 
            Effect: "Allow"
            Action: 
              - "sns:Publish"
            Resource: !Ref NotificationsTopic
          - 
            Effect: "Allow"
            Action: 
              - "sts:AssumeRole"
            #allow it to assume the relevant role in each child account (including this one)
            Resource: !Split [ ",", !Join [ "", ["arn:aws:iam::", !Join [ ":role/automation-admin-check,arn:aws:iam::", !Ref ChildAccounts ], ":role/automation-admin-check"]]]

  CfnStackDriftCheckerFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub "${AWS::StackName}-cfn-stack-drift-checker"
      Handler: cfnStackDriftChecker.handler
      Role: !GetAtt CfnStackDriftCheckerLambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Timeout: 300
      MemorySize: 128
      Environment:
        Variables:
          ALERTS_TOPIC: !Ref NotificationsTopic
          CHILD_ACCOUNTS: !Join [ ",", !Ref ChildAccounts ]
      Code: 
        S3Bucket: !Sub "cloudformation-code-deploy-staging-${AWS::AccountId}"
        S3Key: !Sub "${AWS::StackName}/function-code/code.zip"
        S3ObjectVersion: !Ref CodeVersion
      Tags: 
        - Key: revision
          Value: !Ref Revision
  CfnStackDriftCheckerFunctionInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt CfnStackDriftCheckerFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CfnStackDriftCheckerSchedule.Arn

  CfnStackDriftCheckerSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(0 1 * * ? *)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt CfnStackDriftCheckerFunction.Arn
          Id: 'CfnStackDriftCheckerFunction'

  NotificationsTopic:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription:
        - Endpoint: !Ref NotificationEmailAddress
          Protocol: email

  NotificationsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: budgets.amazonaws.com
            Action: "SNS:Publish"
            Resource: !Ref NotificationsTopic
      Topics: 
        - !Ref NotificationsTopic

  OrganisationBudget:
    Type: "AWS::Budgets::Budget"
    Properties:
      Budget:
        BudgetType: COST
        TimeUnit: MONTHLY
        BudgetLimit:
          Amount: !Ref Budget
          Unit: USD
      NotificationsWithSubscribers:
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            ThresholdType: PERCENTAGE
            Threshold: 100
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref NotificationsTopic
        - Notification:
            NotificationType: ACTUAL
            ComparisonOperator: GREATER_THAN
            ThresholdType: PERCENTAGE
            Threshold: 5
          Subscribers:
            - SubscriptionType: SNS
              Address: !Ref NotificationsTopic

Outputs:
  GoHere: 
    Value: !Sub "Now create a password for ${AllAccountAdminUser}: https://console.aws.amazon.com/iam/home#/users/${AllAccountAdminUser}?section=security_credentials"
  CloudTrailCommand1:
    Value: "aws organizations enable-aws-service-access --service-principal cloudtrail.amazonaws.com"
  CloudTrailCommand2:
    # IsOrganizationTrail not supported by cf yet so have to use cli - https://github.com/aws-cloudformation/aws-cloudformation-coverage-roadmap/issues/45
    Value: !Sub "aws cloudtrail create-trail --name all-accounts-management-events --s3-bucket-name ${CloudTrailLogsBucket} --is-organization-trail --is-multi-region-trail"
  CloudTrailCommand3:
    Value: "aws cloudtrail start-logging --name all-accounts-management-events"
